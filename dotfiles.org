#+TITLE: dotfiles
#+PROPERTY: header-args :tangle-mode (identity #o444)

This file contains the configurations for the programs I use.

* bash
  :PROPERTIES:
  :header-args: :tangle ~/.bashrc
  :END:
** preamble
   #+BEGIN_SRC bash
     # This file was generated from dotfiles.org. Any changes made here will be
     # overwritten.
   #+END_SRC

** aliases
   #+BEGIN_SRC bash
     # grep colors
     alias 'grep'='grep --color=auto'
     # git
     alias 'gaa'='git add --all'
     alias 'gcmsg'='git commit -m'
     alias 'gd'='git diff'
     alias 'glog'='git log --graph --pretty="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cD) %C(bold blue)<%an>%Creset" --abbrev-commit --all'
     alias 'gst'='git status'
     alias 'gro'='cd "$(git rev-parse --show-toplevel)"'
     # other
     alias '..'='cd ..'
     alias '...'='cd ../..'
     alias '?'='echo $?'
     alias 'c'='clear'
     alias 'ec'="emacsclient -n -r -a \"\""
     alias 'exip'='curl ifconfig.co'
     alias 'l'='ls --color -Fahl --group-directories-first --time-style=long-iso'
     alias 'ls'='ls --color=auto'
     alias 'less'='less -RMI'
     alias 'lisp'='rlwrap -pGreen -O "\*" -S "λ " -ri -q\" sbcl --noinform'
     alias -- '+'='pushd .'
     alias -- '-'='popd'
     alias 'f'='fd -H'
     alias 'which'='type'
   #+END_SRC

** colors
   #+BEGIN_SRC bash
     # normal colors
     RED='\[\033[00;31m\]'
     GREEN='\[\033[00;32m\]'
     YELLOW='\[\033[00;33m\]'
     BLUE='\[\033[00;34m\]'
     PURPLE='\[\033[00;35m\]'
     CYAN='\[\033[00;36m\]'
     LIGHTGRAY='\[\033[00;37m\]'
     WHITE='\[\033[01;37m\]'
     # light colors
     LRED='\[\033[01;31m\]'
     LGREEN='\[\033[01;32m\]'
     LYELLOW='\[\033[01;33m\]'
     LBLUE='\[\033[01;34m\]'
     LPURPLE='\[\033[01;35m\]'
     LCYAN='\[\033[01;36m\]'
     # reset to default color
     RESET='\[\033[0m\]'
   #+END_SRC

** completion
   #+BEGIN_SRC bash
     # enable completion when not in posix mode
     if ! shopt -oq posix
     then
         if [[ -f /usr/share/bash-completion/bash_completion ]]
         then
             . /usr/share/bash-completion/bash_completion
         elif [[ -f /etc/bash_completion ]]
         then
             . /etc/bash_completion
         fi
     fi
   #+END_SRC

** functions
*** open in default application
    #+BEGIN_SRC bash
     o() {
         if [[ "$#" -eq 0 ]]
         then
             xdg-open . &> /dev/null
         else
             for PARAM in "$@"
             do
                 xdg-open "$PARAM" &> /dev/null
             done

         fi
     }
    #+END_SRC

*** update system
    #+BEGIN_SRC bash
      u() {
          case "$(lsb_release -si)" in
              Debian)
                  printf "updating a debian system ...\n"
                  sudo apt update && sudo apt upgrade
                  ;;
              openSUSE)
                  printf "updating an openSUSE system ...\n"
                  sudo zypper update
                  ;;
              ,*)
                  printf "can't update unknown system\n"
                  ;;
          esac

          if command -v flatpak >/dev/null
          then
              printf "updating flatpak packages ...\n"
              flatpak update
              flatpak uninstall --unused
          fi

          if command -v rustup >/dev/null
          then
              printf "updating rust ...\n"
              rustup update
          fi
      }
    #+END_SRC

*** man pages with color
    #+BEGIN_SRC bash
     export MANROFFOPT=-c
     man() {
         if [[ -n "$INSIDE_EMACS" ]]
         then
             emacsclient -ne "(man \"$*\")"
         else
             env \
                 LESS_TERMCAP_mb=$'\e[01;31m' \
                 LESS_TERMCAP_md=$'\e[01;31m' \
                 LESS_TERMCAP_me=$'\e[0m' \
                 LESS_TERMCAP_ue=$'\e[0m' \
                 LESS_TERMCAP_us=$'\e[01;32m' \
                 man "$@"
         fi
     }
    #+END_SRC

** history
   #+BEGIN_SRC bash
     # append the the $HISTFILE instead of overwriting it
     shopt -s histappend
     # ignore lines which begin with a space and ignore
     # duplicate history entries
     HISTCONTROL=ignoreboth
     # increase history size
     HISTSIZE=100000
     HISTFILESIZE="$HISTSIZE"
   #+END_SRC

** prompt
   #+BEGIN_SRC bash
     custom_prompt() {
         local LAST_EXIT_CODE="$?"
         if [[ "$LAST_EXIT_CODE" != "0" ]]
         then
             LAST_EXIT_CODE="$LRED($LAST_EXIT_CODE)$RESET "
         else
             LAST_EXIT_CODE=""
         fi
         local USER="$LBLUE\u$RESET"
         local HOST="$LGREEN\h$RESET"
         PS1="${LAST_EXIT_CODE}${USER}@${HOST} ${PURPLE}::${RESET} \w ${PURPLE}\$${RESET} "
     }

     PROMPT_COMMAND=custom_prompt
   #+END_SRC

** readline
   #+BEGIN_SRC bash
     if [[ $- == *i* ]]
     then
         bind "set show-all-if-ambiguous on"
         bind "set blink-matching-paren on"
         bind "set completion-ignore-case on"
         bind "set colored-completion-prefix on"
         bind "set keyseq-timeout 1200"

         bind '"\C-xp": print-last-kbd-macro'
         bind '"\C-xf": "find . -iname \"**\"\C-b\C-b"'
         bind '"\ep": previous-history'
         bind '"\en": next-history'
     fi
   #+END_SRC

** window size
   #+BEGIN_SRC bash
     # update window size automatically
     shopt -s checkwinsize
   #+END_SRC

* gdb
  #+BEGIN_SRC gdb-script :tangle ~/.gdbinit
    set print pretty on

    set history save on
    set history remove-duplicates 10
    set history filename ~/.gdb_history
    set disassembly-flavor intel

    define show_asm
        layout asm
        layout regs
    end
  #+END_SRC

* git
  #+BEGIN_SRC conf-unix :tangle ~/.gitconfig
    # generated from dotfiles.org

    [user]
        name = 0x28
        email = 12886563+0x28@users.noreply.github.com
    [push]
        default = matching
    [pull]
        rebase = false

  #+END_SRC

* shellcheck
  #+BEGIN_SRC  conf-unix :tangle ~/.shellcheckrc
    # enable all possible warnings
    enable=all
  #+END_SRC

* XCompose
  :PROPERTIES:
  :header-args: :tangle ~/.XCompose
  :END:
  XCompose can be used to enter characters not present in the normal qwerty
  keyboard layout. The Multi_key is my right alt key.

  #+BEGIN_SRC conf
    <Multi_key> <a> : "ä"
    <Multi_key> <A> : "Ä"

    <Multi_key> <u> : "ü"
    <Multi_key> <U> : "Ü"

    <Multi_key> <o> : "ö"
    <Multi_key> <O> : "Ö"

    <Multi_key> <s> <s> : "ß"
    <Multi_key> <S> <S> : "ẞ"

    <Multi_key> <q> : "@"

    <Multi_key> <e> : "€"
  #+END_SRC

* Xmodmap
  :PROPERTIES:
  :header-args: :tangle ~/.Xmodmap
  :END:
  The following configuration enables the hyper modifier. Caps lock is disabled.

  #+BEGIN_SRC conf
    ! ------ HYPER ------
    ! remove lock modifier
    clear Lock
    ! caps lock key is now hyper
    keycode 66 = Hyper_L
    ! caps lock is not a super key
    remove mod4 = Hyper_L
    ! hyper triggers mod3
    add mod3 = Hyper_L
  #+END_SRC

* scripts
** open emacs
   #+BEGIN_SRC bash :tangle ~/bin/oemacs :tangle-mode (identity #o500)
     #!/usr/bin/env bash

     if ! xdotool search --desktop 0 --class emacs windowactivate
     then
         emacsclient -c -a ""
     fi
   #+END_SRC

** open terminal
   #+BEGIN_SRC bash :tangle ~/bin/oterm :tangle-mode (identity #o500)
     #!/usr/bin/env bash

     if ! xdotool search --desktop 0 --class konsole windowactivate
     then
         konsole
     fi
   #+END_SRC

* local variables
  If we save this file the code blocks will be tangled automatically. Existing
  files will be overwritten.

  # Local Variables:
  # after-save-hook: (org-babel-tangle)
  # End:
